1、进程与线程的区别？？
答： 进程就是正在运行的程序,它是线程的集合，线程就是正在运行的程序中的一条执行路径,多线程机会为了提高程序效率

2、多线程的应用场景？？
迅雷多实例下载、短信发送、多线程下载、爬虫采集数据、QQ、分布式job(需要同时一个执行多个任务调度)、使用多线程提高程序的效率、前端开发ajax(异步上传)


3、创建线程有哪些方式？？
答:  1、使用继承Thread类方式,继承Thread类重写run方法
     2、使用实现runnable接口方式
     3、使用匿名内部类方式
     4、 callable
     5、 使用线程池创建线程


4、 什么是同步？什么是异步 ？？？
同步是单线程从上往下执行,按顺序的，异步(多线程)同个时间执行同个代码,多线程之间,每个线程互不影响
Cpu执行权=》主线程先执行再到子线程执行


5、守护线程
Java中有两种线程,一种是用户线程，另一种是守护线程
用户线程是指用户自定义创建的线程,主线程停止,用户线程不会停止
守护线程当进程不存在或主线程停止，守护线程也会被停止
使用setDaemon(true)方法设置为守护线程


什么是守护线程,和main相关

6、多线程运行状态
新建状态 =====》 就绪状态
                  ⬆️
                ⬆️   ⬇️
              ⬆️       ⬇️
          阻塞状态⬅️⬅️⬅️运行状态➡️➡️➡️死亡状态



多线程五个状态讲解：
新建、准备、运行、休眠、停止

新建状态：new Thread();
就绪状态: start()方法 等待cpu调度，就绪状态
运行状态: cpu开始执行run
死亡状态: run方法执行完毕或者stop方法
阻塞状态: 休眠状态,sleep方法或者wait方法,就会使线程睡眠,重新等待cpu调度,就绪状态

join()方法作用
Join作用是让其他线程变为等待;t1.join(); //让其他线程变为等待,直到当前t1线程执行完毕,才释放

Thread.join把指定的加人到当前

Join正在A线程，另一个线程B,A线程调用B的这个join方法，作用:  A等待B线程执行完毕之后(释放我的CPU执行权),在继续执行
优先级。



多线程线程安全（章节）

1、什么是线程安全问题？？？？？
答： 当多个线程同时共享同一个全局变量或静态变量,做写的时候,可能会受到其他线程的干扰，导致数据有问题,这种现象叫做线程安全问题

2、使用同步代码快解决线程安全问题
线程如何实现同步()
多个线程共享同一个全局变量,保证数据安全问题-------保证数据的原子性
解决方法
Synchronized ----- 自动挡
Lock-----jdk1.5并发包-手动
什么地方需要考虑加锁？
考虑 真正产生共享同一全局变量的时候


线程安全问题的解决思路: 当多个不要同时操作同一个全局变量做写的操作


使用synchronized条件：
1、必须要有两个线程以上,需要发生同步
2、多个线程想同步，必须用同一把锁
3、保证只有一个线程进行执行

原理：
 1、有一个线程已经拿到锁,其他线程已经有cpu执行权的,一直排队,等待其他线程释放锁
 2、锁是在什么时候释放？
 代码执行完毕或者是程序跑出异常都会被释放掉
 3、 锁已经被释放掉的话,其他线程开始获取锁进去同步抢锁
 4、锁的资源竞争
 5、死锁的问题
好处:
  解决了多线程的安全问题
 缺点:
  多个线程需要判断锁,较为消耗资源、抢锁的资源,效率非常低


什么是同步函数？
答： 在方法上修饰synchronized成为同步函数
